# Project 8 - Pentesting Live Targets

Time spent: 15 hours spent in total

> Objective: Identify vulnerabilities in three different versions of the Globitek website: blue, green, and red.

The six possible exploits are:

* Username Enumeration
* Insecure Direct Object Reference (IDOR)
* SQL Injection (SQLi)
* Cross-Site Scripting (XSS)
* Cross-Site Request Forgery (CSRF)
* Session Hijacking/Fixation

Each color is vulnerable to only 2 of the 6 possible exploits. First discover which color has the specific vulnerability, then write a short description of how to exploit it, and finally demonstrate it using screenshots compiled into a GIF.

## Blue

Vulnerability #1: SQL Injection (SQLi)

Description: First, attempted SQL injection of "or '1=1" on the Red site for salesperson ID and was returned to the main listing with no error meessage.  Then, attempted the same SQL injection for salesperson ID on the Blue site and was able to successfully execute the query on the database, noting the error returned of database query failed.  The blue site lacks the sanitization/input validation controls the red and green site have in place to prevent that query from reaching the back-end database.

<img src="blue-sqlinjection.gif">

Vulnerability #2: Session Hijacking/Fixation

Description: In MOzilla FireFox started one authenticated session for userID pperson and captured the associated session cookie (PHPSESSID).  Then, opened a new browser of Chrone (the one Burpsuite opens as browser by default) and went to the blue site - confirmed that it was a different unauthenticated session first and then copied and used the cookie from the Mozilla FireFox browser session into this new browser and was succesffully able to access the staff menu page (only accessible to authenticated sessions).

<img src="blue-sessionhijacking.gif">

## Green

Vulnerability #1: UserName Enumeration

Description: Entered a variety of known valid and invalid usernames into the login portal. Noted that valid usernames returned "Log in was unsuccessful" in bold, while invalid usernames returned the same error unbolded.  Inspected the text and noted the developer had coded these two different responses (Failed and Failure) depending on whether 1) invalid username OR 2) Valid UserName and Invalid Password.  This information could be used by the attacker to compile a list of known valid usernames.

<img src="green-UsernameEnumeration.gif">

Vulnerability #2: Cross-Site Scripting (XSS)

Description: In the green site "Contact Us" section - leverage the form to submit an XSS attack in the form of an alert.  Then, authenticated as a valid user pperson to view the staff "Feedback" page and upon opening the XSS alert the attacker entered automatically ran in the background and the alert appeared on my screen.

<img src="green-xss.gif">


## Red

Vulnerability #1: Cross-Site Request Forgery (CSRF)

Description: As an authenticated user (pperson) logged into the red site Users portal and noted the list of users.  Then using burpsuite Repeater to craft a packet/message to send using the valid authenticated users token and noted that I was able to successfully create a new user 'testREAL' without the authenticated user even knowing the message / transaction had taken place.  While the admin over time would eventually notice the new user or changes to an existing user over time (access reviews, etc.) it proves the concept of CSRF and exposes the vulnerability on the red site.

<img src="red-csrf.gif">

Vulnerability #2: Insecure Direct Object Reference (IDOR)

Description: On the red site using the salesperson ID directory path lookup noted that you could submit various ID numbers in the URL and the result would return if the ID belonged to a valid user, even though on the main salesperson page the individuals were not listed or hyperlinked.  This allowed us to discover user ID 10 who was not supposed to be public until sept 1 and user ID 11 who was fired for stealing, which should not have been available by entering the ID in the URL path (e.g., IDOR attack).

<img src="red-idor.gif">


## Notes

Describe any challenges encountered while doing the work
No real significant challenges, but it would have been nice to be able to successfully get the SQLi to update the database and verify the output for a salesperson was altered in the back-end DB.  But cool to see the blue site was vulnerabie vs. the green/red not and react / return different tangible responses to the attempted attacks.
